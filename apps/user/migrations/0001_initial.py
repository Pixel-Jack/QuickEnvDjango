# Generated by Django 2.1.3 on 2018-12-27 23:03

import apps.user.models
import apps.user.validators
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_status', models.IntegerField(choices=[(0, 'common'), (1, 'banned')], default=0)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 255 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=255, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last login')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='last name')),
                ('is_email_confirmed', models.BooleanField(default=False, verbose_name='email confirmed')),
                ('phone_number', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Enter a phone number. This number must be in the generic international format.', max_length=255, validators=[apps.user.validators.GenericInternationalPhoneNumberValidator], verbose_name='phone number')),
                ('city', models.CharField(blank=True, max_length=255, verbose_name='city')),
                ('profile_picture', models.URLField(blank=True, max_length=255, verbose_name='Profile picture')),
                ('facebook', models.URLField(blank=True, max_length=255, verbose_name='Facebook')),
                ('linkedin', models.URLField(blank=True, max_length=255, verbose_name='LinkedIn')),
                ('google', models.URLField(blank=True, max_length=255, verbose_name='Google')),
                ('twitter', models.URLField(blank=True, max_length=255, verbose_name='Twitter')),
                ('website', models.URLField(blank=True, max_length=255, verbose_name='website')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', apps.user.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='username_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
    ]
